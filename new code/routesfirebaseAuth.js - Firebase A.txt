// routes/firebaseAuth.js - Firebase Authentication Routes
const express = require('express');
const jwt = require('jsonwebtoken');
const rateLimit = require('express-rate-limit');
const { body, validationResult } = require('express-validator');

const User = require('../models/User');
const firebaseService = require('../config/firebase');
const { authenticateToken } = require('../middleware/auth');
const logger = require('../utils/logger');

const router = express.Router();

// Rate limiting for authentication requests
const authLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 5, // 5 auth requests per 15 minutes per IP
  message: {
    success: false,
    error: 'Too many authentication attempts. Please try again after 15 minutes.'
  },
  standardHeaders: true,
  legacyHeaders: false,
});

// Validation middleware
const firebaseTokenValidation = [
  body('idToken')
    .notEmpty()
    .withMessage('Firebase ID token is required')
    .isString()
    .withMessage('ID token must be a string')
];

const phoneNumberValidation = [
  body('phoneNumber')
    .isLength({ min: 10, max: 10 })
    .withMessage('Phone number must be 10 digits')
    .isNumeric()
    .withMessage('Phone number must contain only digits')
    .custom((value) => {
      if (!/^[6-9]\d{9}$/.test(value)) {
        throw new Error('Invalid Indian mobile number format');
      }
      return true;
    })
];

// Helper function to generate JWT token
const generateJWTToken = (user, firebaseUser = null) => {
  const payload = {
    userId: user._id,
    phoneNumber: user.phoneNumber,
    isVerified: user.isVerified,
    firebaseUid: firebaseUser?.uid || null
  };

  return jwt.sign(
    payload,
    process.env.JWT_SECRET || 'your-secret-key',
    { 
      expiresIn: process.env.JWT_EXPIRE || '7d',
      issuer: 'quickride-api',
      audience: 'quickride-app'
    }
  );
};

// Helper function to sync user data between Firebase and MongoDB
const syncUserData = async (firebaseUser, additionalData = {}) => {
  try {
    const phoneNumber = firebaseUser.phoneNumber.replace('+91', '');
    
    // Find existing user or create new one
    let user = await User.findOne({ phoneNumber });
    
    if (user) {
      // Update existing user
      user.isVerified = firebaseUser.verified;
      user.lastLogin = new Date();
      if (additionalData.email && !user.email) {
        user.email = additionalData.email;
      }
      if (additionalData.name && !user.name) {
        user.name = additionalData.name;
      }
      await user.save();
    } else {
      // Create new user
      user = new User({
        phoneNumber,
        name: additionalData.name,
        email: firebaseUser.email || additionalData.email,
        isVerified: firebaseUser.verified,
        lastLogin: new Date()
      });
      await user.save();
    }

    return user;
  } catch (error) {
    logger.error('User sync error:', error);
    throw error;
  }
};

// @route   POST /api/auth/firebase/verify-phone
// @desc    Verify Firebase phone authentication and login
// @access  Public
router.post('/verify-phone', authLimiter, firebaseTokenValidation, async (req, res) => {
  try {
    // Check for validation errors
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: 'Validation failed',
        details: errors.array()
      });
    }

    const { idToken, userData = {} } = req.body;

    // Check if Firebase is available
    if (!firebaseService.isAvailable()) {
      return res.status(503).json({
        success: false,
        error: 'Firebase authentication service is not available'
      });
    }

    // Verify Firebase ID token
    const verificationResult = await firebaseService.verifyIdToken(idToken);
    
    if (!verificationResult.success) {
      return res.status(401).json({
        success: false,
        error: 'Invalid Firebase token',
        details: verificationResult.error
      });
    }

    const firebaseUser = verificationResult.user;

    // Check if phone number is verified
    if (!firebaseUser.verified) {
      return res.status(400).json({
        success: false,
        error: 'Phone number not verified in Firebase'
      });
    }

    // Sync user data with our database
    const user = await syncUserData(firebaseUser, userData);

    // Generate JWT token
    const jwtToken = generateJWTToken(user, firebaseUser);

    logger.info(`Firebase phone authentication successful for user: ${firebaseUser.phoneNumber}`);

    res.json({
      success: true,
      message: 'Phone verification successful',
      token: jwtToken,
      expiresIn: 7 * 24 * 60 * 60, // 7 days in seconds
      user: {
        id: user._id,
        phoneNumber: user.phoneNumber,
        name: user.name,
        email: user.email,
        isVerified: user.isVerified,
        firebaseUid: firebaseUser.uid,
        createdAt: user.createdAt,
        stats: user.stats
      },
      firebase: {
        uid: firebaseUser.uid,
        phoneNumber: firebaseUser.phoneNumber
      }
    });

  } catch (error) {
    logger.error('Firebase phone verification error:', error);
    res.status(500).json({
      success: false,
      error: 'Phone verification failed. Please try again.',
      ...(process.env.NODE_ENV === 'development' && { details: error.message })
    });
  }
});

// @route   POST /api/auth/firebase/link-phone
// @desc    Link phone number to existing account
// @access  Private
router.post('/link-phone', authenticateToken, firebaseTokenValidation, async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: 'Validation failed',
        details: errors.array()
      });
    }

    const { idToken } = req.body;

    if (!firebaseService.isAvailable()) {
      return res.status(503).json({
        success: false,
        error: 'Firebase service not available'
      });
    }

    // Verify Firebase token
    const verificationResult = await firebaseService.verifyIdToken(idToken);
    
    if (!verificationResult.success) {
      return res.status(401).json({
        success: false,
        error: 'Invalid Firebase token'
      });
    }

    const firebaseUser = verificationResult.user;
    const user = await User.findById(req.user.userId);

    if (!user) {
      return res.status(404).json({
        success: false,
        error: 'User not found'
      });
    }

    // Update user with Firebase UID
    user.isVerified = firebaseUser.verified;
    user.lastLogin = new Date();
    await user.save();

    logger.info(`Phone number linked to Firebase for user: ${user.phoneNumber}`);

    res.json({
      success: true,
      message: 'Phone number linked successfully',
      firebase: {
        uid: firebaseUser.uid,
        phoneNumber: firebaseUser.phoneNumber,
        verified: firebaseUser.verified
      }
    });

  } catch (error) {
    logger.error('Firebase phone linking error:', error);
    res.status(500).json({
      success: false,
      error: 'Phone linking failed'
    });
  }
});

// @route   POST /api/auth/firebase/custom-token
// @desc    Generate Firebase custom token for user
// @access  Private
router.post('/custom-token', authenticateToken, async (req, res) => {
  try {
    if (!firebaseService.isAvailable()) {
      return res.status(503).json({
        success: false,
        error: 'Firebase service not available'
      });
    }

    const user = await User.findById(req.user.userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        error: 'User not found'
      });
    }

    // Generate custom token with user claims
    const customClaims = {
      phoneNumber: user.phoneNumber,
      isVerified: user.isVerified,
      role: 'passenger',
      totalRides: user.stats.totalRides
    };

    const tokenResult = await firebaseService.createCustomToken(
      user.phoneNumber.replace(/\D/g, ''), // Use phone as UID
      customClaims
    );

    if (!tokenResult.success) {
      return res.status(500).json({
        success: false,
        error: 'Failed to generate custom token',
        details: tokenResult.error
      });
    }

    res.json({
      success: true,
      customToken: tokenResult.token,
      message: 'Custom token generated successfully'
    });

  } catch (error) {
    logger.error('Custom token generation error:', error);
    res.status(500).json({
      success: false,
      error: 'Custom token generation failed'
    });
  }
});

// @route   POST /api/auth/firebase/check-user
// @desc    Check if user exists in Firebase by phone number
// @access  Public
router.post('/check-user', phoneNumberValidation, async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: 'Validation failed',
        details: errors.array()
      });
    }

    const { phoneNumber } = req.body;

    if (!firebaseService.isAvailable()) {
      return res.status(503).json({
        success: false,
        error: 'Firebase service not available'
      });
    }

    // Check Firebase user
    const firebaseResult = await firebaseService.getUserByPhoneNumber(`+91${phoneNumber}`);
    
    // Check local database user
    const localUser = await User.findOne({ phoneNumber });

    res.json({
      success: true,
      exists: {
        firebase: firebaseResult.success,
        local: !!localUser
      },
      user: localUser ? {
        id: localUser._id,
        phoneNumber: localUser.phoneNumber,
        name: localUser.name,
        isVerified: localUser.isVerified
      } : null,
      firebase: firebaseResult.success ? {
        uid: firebaseResult.user.uid,
        phoneNumber: firebaseResult.user.phoneNumber
      } : null
    });

  } catch (error) {
    logger.error('Check user error:', error);
    res.status(500).json({
      success: false,
      error: 'User check failed'
    });
  }
});

// @route   DELETE /api/auth/firebase/delete-account
// @desc    Delete user account from both Firebase and local database
// @access  Private
router.delete('/delete-account', authenticateToken, [
  body('confirmPhoneNumber').custom((value, { req }) => {
    if (value !== req.user.phoneNumber) {
      throw new Error('Phone number confirmation does not match');
    }
    return true;
  })
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: 'Validation failed',
        details: errors.array()
      });
    }

    const user = await User.findById(req.user.userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        error: 'User not found'
      });
    }

    // Check for active rides
    const activeRides = await require('../models/Ride').find({
      userId: user._id,
      status: { $in: ['requested', 'accepted', 'started'] }
    });

    if (activeRides.length > 0) {
      return res.status(400).json({
        success: false,
        error: 'Cannot delete account with active rides'
      });
    }

    try {
      // Try to delete from Firebase if available
      if (firebaseService.isAvailable()) {
        const firebaseResult = await firebaseService.getUserByPhoneNumber(`+91${user.phoneNumber}`);
        if (firebaseResult.success) {
          await firebaseService.deleteUser(firebaseResult.user.uid);
        }
      }
    } catch (firebaseError) {
      logger.warn('Firebase user deletion failed:', firebaseError);
      // Continue with local deletion even if Firebase fails
    }

    // Soft delete from local database
    user.isActive = false;
    user.email = null;
    user.name = 'Deleted User';
    await user.save();

    logger.info(`User account deleted: ${user.phoneNumber}`);

    res.json({
      success: true,
      message: 'Account deleted successfully'
    });

  } catch (error) {
    logger.error('Account deletion error:', error);
    res.status(500).json({
      success: false,
      error: 'Account deletion failed'
    });
  }
});

module.exports = router;