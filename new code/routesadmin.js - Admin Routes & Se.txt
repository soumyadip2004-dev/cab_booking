// routes/admin.js - Admin Routes & Seed Data
const express = require('express');
const mongoose = require('mongoose');

const User = require('../models/User');
const Rider = require('../models/Rider');
const Ride = require('../models/Ride');
const logger = require('../utils/logger');

const router = express.Router();

// @route   GET /api/admin/stats
// @desc    Get application statistics
// @access  Public (in development)
router.get('/stats', async (req, res) => {
  try {
    const [userCount, riderCount, rideCount] = await Promise.all([
      User.countDocuments({ isActive: true }),
      Rider.countDocuments({ isActive: true }),
      Ride.countDocuments()
    ]);

    const activeRiders = await Rider.countDocuments({
      isActive: true,
      'availability.isOnline': true
    });

    const completedRides = await Ride.countDocuments({
      status: 'completed'
    });

    const todayStart = new Date();
    todayStart.setHours(0, 0, 0, 0);
    
    const todayRides = await Ride.countDocuments({
      createdAt: { $gte: todayStart }
    });

    const totalRevenue = await Ride.aggregate([
      { $match: { status: 'completed' } },
      { $group: { _id: null, total: { $sum: '$pricing.actualTotal' } } }
    ]);

    res.json({
      success: true,
      stats: {
        users: {
          total: userCount,
          verified: userCount // All users are verified in simple auth
        },
        riders: {
          total: riderCount,
          active: activeRiders,
          offline: riderCount - activeRiders
        },
        rides: {
          total: rideCount,
          completed: completedRides,
          today: todayRides,
          completionRate: rideCount > 0 ? ((completedRides / rideCount) * 100).toFixed(1) : 0
        },
        revenue: {
          total: totalRevenue.length > 0 ? totalRevenue[0].total : 0
        }
      },
      timestamp: new Date()
    });

  } catch (error) {
    logger.error('Get stats error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch statistics'
    });
  }
});

// @route   POST /api/admin/seed-riders
// @desc    Seed sample riders data
// @access  Public (in development)
router.post('/seed-riders', async (req, res) => {
  try {
    // Clear existing riders (optional)
    const clearExisting = req.body.clearExisting || false;
    if (clearExisting) {
      await Rider.deleteMany({});
      logger.info('Existing riders cleared');
    }

    const sampleRiders = [
      {
        name: 'Rajesh Kumar',
        phoneNumber: '9876543210',
        email: 'rajesh.kumar@example.com',
        vehicleType: 'bike',
        vehicleDetails: {
          number: 'KA01AB1234',
          model: 'Honda Activa 6G',
          brand: 'Honda',
          year: 2022,
          color: 'Red',
          fuelType: 'petrol'
        },
        location: {
          current: {
            type: 'Point',
            coordinates: [77.5946, 12.9716], // Bangalore
            address: 'MG Road, Bangalore'
          }
        },
        ratings: {
          average: 4.8,
          totalRatings: 150,
          breakdown: { 5: 120, 4: 25, 3: 4, 2: 1, 1: 0 }
        },
        stats: {
          totalRides: 150,
          completedRides: 145,
          totalEarnings: 12500,
          acceptanceRate: 95
        },
        status: 'approved'
      },
      {
        name: 'Amit Singh',
        phoneNumber: '8765432109',
        email: 'amit.singh@example.com',
        vehicleType: 'bike',
        vehicleDetails: {
          number: 'KA05CD5678',
          model: 'Bajaj Pulsar NS200',
          brand: 'Bajaj',
          year: 2021,
          color: 'Black',
          fuelType: 'petrol'
        },
        location: {
          current: {
            type: 'Point',
            coordinates: [77.6412, 12.9352], // Indiranagar
            address: 'Indiranagar, Bangalore'
          }
        },
        ratings: {
          average: 4.7,
          totalRatings: 200,
          breakdown: { 5: 140, 4: 45, 3: 12, 2: 2, 1: 1 }
        },
        stats: {
          totalRides: 200,
          completedRides: 190,
          totalEarnings: 18500,
          acceptanceRate: 92
        },
        status: 'approved'
      },
      {
        name: 'Priya Sharma',
        phoneNumber: '7654321098',
        email: 'priya.sharma@example.com',
        vehicleType: 'cab',
        vehicleDetails: {
          number: 'KA02EF9012',
          model: 'Maruti Swift Dzire',
          brand: 'Maruti',
          year: 2020,
          color: 'White',
          fuelType: 'petrol'
        },
        location: {
          current: {
            type: 'Point',
            coordinates: [77.6109, 12.9279], // Koramangala
            address: 'Koramangala, Bangalore'
          }
        },
        ratings: {
          average: 4.9,
          totalRatings: 300,
          breakdown: { 5: 270, 4: 25, 3: 4, 2: 1, 1: 0 }
        },
        stats: {
          totalRides: 300,
          completedRides: 295,
          totalEarnings: 45000,
          acceptanceRate: 98
        },
        status: 'approved'
      },
      {
        name: 'Mohammed Ali',
        phoneNumber: '6543210987',
        email: 'mohammed.ali@example.com',
        vehicleType: 'auto',
        vehicleDetails: {
          number: 'KA03GH3456',
          model: 'Bajaj RE Auto',
          brand: 'Bajaj',
          year: 2019,
          color: 'Yellow',
          fuelType: 'cng'
        },
        location: {
          current: {
            type: 'Point',
            coordinates: [77.5937, 12.9698], // Majestic
            address: 'Majestic, Bangalore'
          }
        },
        ratings: {
          average: 4.6,
          totalRatings: 180,
          breakdown: { 5: 108, 4: 54, 3: 14, 2: 3, 1: 1 }
        },
        stats: {
          totalRides: 180,
          completedRides: 170,
          totalEarnings: 15500,
          acceptanceRate: 88
        },
        status: 'approved'
      },
      {
        name: 'Suresh Reddy',
        phoneNumber: '5432109876',
        email: 'suresh.reddy@example.com',
        vehicleType: 'cab',
        vehicleDetails: {
          number: 'KA04IJ7890',
          model: 'Hyundai Grand i10',
          brand: 'Hyundai',
          year: 2021,
          color: 'Silver',
          fuelType: 'petrol'
        },
        location: {
          current: {
            type: 'Point',
            coordinates: [77.7500, 13.0358], // Whitefield
            address: 'Whitefield, Bangalore'
          }
        },
        ratings: {
          average: 4.5,
          totalRatings: 120,
          breakdown: { 5: 66, 4: 36, 3: 12, 2: 4, 1: 2 }
        },
        stats: {
          totalRides: 120,
          completedRides: 110,
          totalEarnings: 22000,
          acceptanceRate: 85
        },
        status: 'approved'
      },
      {
        name: 'Anita Kumari',
        phoneNumber: '4321098765',
        email: 'anita.kumari@example.com',
        vehicleType: 'bike',
        vehicleDetails: {
          number: 'KA06KL2345',
          model: 'TVS Jupiter',
          brand: 'TVS',
          year: 2022,
          color: 'Blue',
          fuelType: 'petrol'
        },
        location: {
          current: {
            type: 'Point',
            coordinates: [77.5773, 12.9279], // Jayanagar
            address: 'Jayanagar, Bangalore'
          }
        },
        ratings: {
          average: 4.8,
          totalRatings: 90,
          breakdown: { 5: 72, 4: 15, 3: 2, 2: 1, 1: 0 }
        },
        stats: {
          totalRides: 90,
          completedRides: 85,
          totalEarnings: 8500,
          acceptanceRate: 94
        },
        status: 'approved'
      }
    ];

    // Insert sample riders
    const insertedRiders = await Rider.insertMany(sampleRiders);

    logger.info(`${insertedRiders.length} sample riders added to database`);

    res.json({
      success: true,
      message: 'Sample riders added successfully',
      count: insertedRiders.length,
      riders: insertedRiders.map(rider => ({
        id: rider._id,
        name: rider.name,
        phoneNumber: rider.phoneNumber,
        vehicleType: rider.vehicleType,
        vehicleNumber: rider.vehicleDetails.number,
        rating: rider.ratings.average,
        status: rider.status
      }))
    });

  } catch (error) {
    logger.error('Seed riders error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to seed riders',
      details: error.message
    });
  }
});

// @route   GET /api/admin/riders
// @desc    Get all riders with pagination
// @access  Public (in development)
router.get('/riders', async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 20;
    const skip = (page - 1) * limit;
    
    const filter = {};
    if (req.query.vehicleType) {
      filter.vehicleType = req.query.vehicleType;
    }
    if (req.query.status) {
      filter.status = req.query.status;
    }
    if (req.query.isOnline !== undefined) {
      filter['availability.isOnline'] = req.query.isOnline === 'true';
    }

    const totalRiders = await Rider.countDocuments(filter);
    const riders = await Rider.find(filter)
      .select('-documents.aadhar -documents.license -bankDetails')
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit);

    res.json({
      success: true,
      riders,
      pagination: {
        currentPage: page,
        totalPages: Math.ceil(totalRiders / limit),
        totalRiders,
        hasNextPage: page < Math.ceil(totalRiders / limit),
        hasPreviousPage: page > 1
      }
    });

  } catch (error) {
    logger.error('Get riders error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch riders'
    });
  }
});

// @route